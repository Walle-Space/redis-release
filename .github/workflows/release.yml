# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    env: 
        GOSU_VERSION: 1.12
        REDIS_VERSION: 6.2.3
        REDIS_DOWNLOAD_URL: http://download.redis.io/releases/redis-6.2.3.tar.gz
        REDIS_DOWNLOAD_SHA: 98ed7d532b5e9671f5df0825bb71f0f37483a16546364049384c63db8764512b
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          set -eux; \
          savedAptMark="$(apt-mark showmanual)"; \
          apt-get update; \
          apt-get install -y --no-install-recommends ca-certificates dirmngr gnupg wget; \
          rm -rf /var/lib/apt/lists/*; \
          dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
          wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
          wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
          export GNUPGHOME="$(mktemp -d)"; \
          gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
          gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
          gpgconf --kill all; \
          rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; \
          apt-mark auto '.*' > /dev/null; \
          [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; \
          apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
          chmod +x /usr/local/bin/gosu; \
          gosu --version; \
          gosu nobody true
      - name: Build Redis
        run: |
          set -eux; \
          \
          savedAptMark="$(apt-mark showmanual)"; \
          apt-get update; \
          apt-get install -y --no-install-recommends \
            ca-certificates \
            wget \
            \
            dpkg-dev \
            gcc \
            libc6-dev \
            libssl-dev \
            make \
          ; \
          rm -rf /var/lib/apt/lists/*; \
          \
          wget -O redis.tar.gz "$REDIS_DOWNLOAD_URL"; \
          echo "$REDIS_DOWNLOAD_SHA *redis.tar.gz" | sha256sum -c -; \
          mkdir -p /usr/src/redis; \
          tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1; \
          rm redis.tar.gz; \
          \
        # disable Redis protected mode [1] as it is unnecessary in context of Docker
        # (ports are not automatically exposed when running inside Docker, but rather explicitly by specifying -p / -P)
        # [1]: https://github.com/redis/redis/commit/edd4d555df57dc84265fdfb4ef59a4678832f6da
          grep -E '^ *createBoolConfig[(]"protected-mode",.*, *1 *,.*[)],$' /usr/src/redis/src/config.c; \
          sed -ri 's!^( *createBoolConfig[(]"protected-mode",.*, *)1( *,.*[)],)$!\10\2!' /usr/src/redis/src/config.c; \
          grep -E '^ *createBoolConfig[(]"protected-mode",.*, *0 *,.*[)],$' /usr/src/redis/src/config.c; \
        # for future reference, we modify this directly in the source instead of just supplying a default configuration flag because apparently "if you specify any argument to redis-server, [it assumes] you are going to specify everything"
        # see also https://github.com/docker-library/redis/issues/4#issuecomment-50780840
        # (more exactly, this makes sure the default behavior of "save on SIGTERM" stays functional by default)
          \
        # https://github.com/jemalloc/jemalloc/issues/467 -- we need to patch the "./configure" for the bundled jemalloc to match how Debian compiles, for compatibility
        # (also, we do cross-builds, so we need to embed the appropriate "--build=xxx" values to that "./configure" invocation)
          gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; \
          extraJemallocConfigureFlags="--build=$gnuArch"; \
        # https://salsa.debian.org/debian/jemalloc/-/blob/c0a88c37a551be7d12e4863435365c9a6a51525f/debian/rules#L8-23
          dpkgArch="$(dpkg --print-architecture)"; \
          case "${dpkgArch##*-}" in \
            amd64 | i386 | x32) extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-page=12" ;; \
            *) extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-page=16" ;; \
          esac; \
          extraJemallocConfigureFlags="$extraJemallocConfigureFlags --with-lg-hugepage=21"; \
          grep -F 'cd jemalloc && ./configure ' /usr/src/redis/deps/Makefile; \
          sed -ri 's!cd jemalloc && ./configure !&'"$extraJemallocConfigureFlags"' !' /usr/src/redis/deps/Makefile; \
          grep -F "cd jemalloc && ./configure $extraJemallocConfigureFlags " /usr/src/redis/deps/Makefile; \
          \
          export BUILD_TLS=yes; \
          make -C /usr/src/redis -j "$(nproc)" all; \
          make -C /usr/src/redis install; \
          \
        # TODO https://github.com/redis/redis/pull/3494 (deduplicate "redis-server" copies)
          serverMd5="$(md5sum /usr/local/bin/redis-server | cut -d' ' -f1)"; export serverMd5; \
          find /usr/local/bin/redis* -maxdepth 0 \
            -type f -not -name redis-server \
            -exec sh -eux -c ' \
              md5="$(md5sum "$1" | cut -d" " -f1)"; \
              test "$md5" = "$serverMd5"; \
            ' -- '{}' ';' \
            -exec ln -svfT 'redis-server' '{}' ';' \
          ; \
          \
          rm -r /usr/src/redis; \
          \
          apt-mark auto '.*' > /dev/null; \
          [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; \
          find /usr/local -type f -executable -exec ldd '{}' ';' \
            | awk '/=>/ { print $(NF-1) }' \
            | sort -u \
            | xargs -r dpkg-query --search \
            | cut -d: -f1 \
            | sort -u \
            | xargs -r apt-mark manual \
          ; \
          apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
          \
          redis-cli --version; \
          redis-server --version
